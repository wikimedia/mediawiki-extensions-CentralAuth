{
  "comments": [
    {
      "key": {
        "uuid": "8e28a382_93116dfe",
        "filename": "CentralAuthPlugin.php",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 458
      },
      "writtenOn": "2014-07-24T02:12:26Z",
      "side": 1,
      "message": "Does this need to be public?\n\nI don\u0027t think this belongs in this class either, AuthPlugin applies to all users, and isn\u0027t specific to the current user. But I don\u0027t really see an alternative.\n\nMaybe make it an array of $originalUsername \u003d\u003e $currentUsername?",
      "revId": "0edacb41e76665b721fa92c07cba7bd7da58a596",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e28a382_f3f6718b",
        "filename": "CentralAuthPlugin.php",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1001
      },
      "writtenOn": "2014-07-24T03:03:38Z",
      "side": 1,
      "message": "I made it public so I could check the value from the unit test. Php is no fun when it comes to introspection of objects from the test harness.\n\nCan you describe a realistic use case where AuthPlugin::updateUser() would be called multiple times in a request to modify distinct User objects? Since PHP is single threaded and shared nothing I don\u0027t see the major harm in abusing a member variable to pass state from authenticate() to updateIUser(). I could null the member in updateUser() to \"cleanup\".\n\nThat being said, switching to a hash of old \u003d\u003e new wouldn\u0027t really cause any harm other than the negligible memory bloat of a PHP array.",
      "parentUuid": "8e28a382_93116dfe",
      "revId": "0edacb41e76665b721fa92c07cba7bd7da58a596",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e28a382_b3ec69b9",
        "filename": "CentralAuthPlugin.php",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 458
      },
      "writtenOn": "2014-07-24T03:07:35Z",
      "side": 1,
      "message": "http://php.net/manual/en/reflectionclass.getproperties.php looks like it would work.\n\nI can\u0027t think of a single time that would ever happen. But it just doesn\u0027t feel right. I\u0027m not super against the idea (why I didn\u0027t give it a -1), I\u0027m just not a fan of it.",
      "parentUuid": "8e28a382_f3f6718b",
      "revId": "0edacb41e76665b721fa92c07cba7bd7da58a596",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e28a382_78b81825",
        "filename": "CentralAuthPlugin.php",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1001
      },
      "writtenOn": "2014-07-24T20:39:29Z",
      "side": 1,
      "message": "{{done}}\u0027ish. I made the property protected. I coded it up as an array keyed by username and it can work but it\u0027s false security because then you are stating that all users named \u0027JimBob\u0027 have been renamed. We don\u0027t have a access to the input username, the input password and the built user object all at the same time and that\u0027s what would be needed to make this state annotation safe for concurrency.\n\nI did add a huge and snarky comment about the situation to dissuade anyone from citing this usage as \"something we already do\" elsewhere.",
      "parentUuid": "8e28a382_b3ec69b9",
      "revId": "0edacb41e76665b721fa92c07cba7bd7da58a596",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}